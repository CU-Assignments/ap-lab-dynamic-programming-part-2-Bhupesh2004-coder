// Word Break
class Solution:
    def wordBreak(self, s: str, wordDict: list) -> bool:
        wordSet = set(wordDict)  # Convert wordDict to a set for O(1) lookup
        n = len(s)
        dp = [False] * (n + 1)
        dp[0] = True  # Empty string can be segmented

        for i in range(1, n + 1):
            for j in range(i):
                if dp[j] and s[j:i] in wordSet:
                    dp[i] = True
                    break  # No need to check further if found
        
        return dp[n]

//Decode Ways
class Solution:
    def numDecodings(self, s: str) -> int:
        if not s or s[0] == '0':
            return 0
        
        n = len(s)
        dp = [0] * (n + 1)
        
        dp[0] = 1
        dp[1] = 1 

        for i in range(2, n + 1):
            one_digit = int(s[i-1])
            two_digit = int(s[i-2:i])  
            
            if 1 <= one_digit <= 9:
                dp[i] += dp[i-1]
            
            if 10 <= two_digit <= 26:
                dp[i] += dp[i-2]

        return dp[n]
